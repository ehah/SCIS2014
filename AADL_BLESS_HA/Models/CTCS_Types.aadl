package CTCS_Types
public
with Data_Model, Base_Types, BLESS_Types, BLESS, CTCS_Properties;
Data Position
end Position;

Data DMI_Message
end DMI_Message;

Data Velocity
Properties
BLESS::Typed => "real";
Data_Model::Data_Representation => Float;
Data_Model::Measurement_Unit => "km/h";
end Velocity;

Data Acceleration
end Acceleration;

Data Time extends Base_Types::Float
end Time;


Data Deceleration
end Deceleration;

Data RBC_Permission
end RBC_Permission;

Data LUA
end LUA;

Data LU
end LU;

Data MA_Size --number of segments in MA
properties
Data_Model::Data_Representation =>Integer;
Data_Model::Initial_Value => ("3");
end MA_Size;

Data DriverConfirmation
end DriverConfirmation;

Data ModeTypes
properties
  BLESS::Typed=> "enumeration (FS,CO)";
  Data_Model::Data_Representation => Enum;
  Data_Model::Enumerators => ("FS","CO");    
end ModeTypes;

Data MA_Request
end MA_Request;

Data EOA
end EOA;
------------------------------------------MA with Segments-------------------
Data Segment
properties
   BLESS::Typed =>
 "record (
 	v1 :  CTCS_Types::Velocity;
 	v2 :  CTCS_Types::Velocity;
    e :   CTCS_Types::Position;
    m:    CTCS_Types::ModeTypes;
 )";
Data_Model::Data_Representation =>Struct;
Data_Model::Element_Names =>  (	"v1", "v2", "e","m");
 Data_Model::Base_Type => (classifier(Velocity), classifier(Velocity), classifier(Position), classifier(ModeTypes));
end Segment;
---Data implementation Segment.impl
--subcomponents
--v1 : data CTCS_Types::Velocity;
--v2 : data CTCS_Types::Velocity;
--e : data CTCS_Types::Position;
--m: data CTCS_Types::ModeTypes;
--end Segment.impl;
Data MovementAuthority
properties
BLESS::Typed => "array [CTCS_Types::MA_Size] of CTCS_Types::Segment";
Data_Model::Data_Representation => Array;
Data_Model::Base_Type => (classifier (CTCS_Types::Segment));
Data_Model::Dimension => (CTCS_Properties::MAsize); --number of segments, 3 in our example
end MovementAuthority;

end CTCS_Types;